version: '3.8'
services:
  mongo:
    build:
      context: .
      dockerfile: mongo.Dockerfile
    container_name: dev-mongo
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: appdb
      MONGO_REPLICA_HOST: localhost
      MONGO_REPLICA_PORT: 27017
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        ['CMD', 'mongosh', '--quiet', '--eval', "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dev-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: youapp-api
  #   depends_on:
  #     mongo:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   env_file: .env
  #   ports:
  #     - '3000:3000'
  #   environment:
  #     DATABASE_URL: mongodb://root:rootpass@mongo:27017/appdb?authSource=admin&replicaSet=rs0
  #     REDIS_URL: redis://redis:6379
  #     NODE_ENV: development
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:dev

volumes:
  mongo_data:
  redis_data:
